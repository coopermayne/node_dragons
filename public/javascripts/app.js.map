{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/initialize.coffee","app/lib/router.coffee","app/lib/view_helper.coffee","app/models/collection.coffee","app/models/model.coffee","app/views/home_view.coffee","app/views/templates/home.hbs","app/views/view.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;A,CCAA;;AACA;AACA;AAFA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfsourcesContent":["var Application;\n\nApplication = {\n  initialize: function() {\n    var HomeView, Router;\n    HomeView = require('views/home_view');\n    Router = require('lib/router');\n    this.homeView = new HomeView();\n    this.router = new Router();\n    return typeof Object.freeze === \"function\" ? Object.freeze(this) : void 0;\n  }\n};\n\nmodule.exports = Application;\n","var application;\n\napplication = require('application');\n\n$(function() {\n  application.initialize();\n  return Backbone.history.start();\n});\n","var Router, application,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napplication = require('application');\n\nmodule.exports = Router = (function(_super) {\n\n  __extends(Router, _super);\n\n  function Router() {\n    return Router.__super__.constructor.apply(this, arguments);\n  }\n\n  Router.prototype.routes = {\n    '': 'home'\n  };\n\n  Router.prototype.home = function() {\n    return $('body').html(application.homeView.render().el);\n  };\n\n  return Router;\n\n})(Backbone.Router);\n","\n\n","var Collection,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = Collection = (function(_super) {\n\n  __extends(Collection, _super);\n\n  function Collection() {\n    return Collection.__super__.constructor.apply(this, arguments);\n  }\n\n  return Collection;\n\n})(Backbone.Collection);\n","var Model,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = Model = (function(_super) {\n\n  __extends(Model, _super);\n\n  function Model() {\n    return Model.__super__.constructor.apply(this, arguments);\n  }\n\n  return Model;\n\n})(Backbone.Model);\n","var HomeView, Turtle, View, customTimeInterval, customTimer, dragon, options, sierpinksiTriangle, template,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nView = require('./view');\n\ntemplate = require('./templates/home');\n\nmodule.exports = HomeView = (function(_super) {\n\n  __extends(HomeView, _super);\n\n  function HomeView() {\n    return HomeView.__super__.constructor.apply(this, arguments);\n  }\n\n  HomeView.prototype.id = 'home-view';\n\n  HomeView.prototype.template = template;\n\n  return HomeView;\n\n})(View);\n\n$(document).ready(function() {\n  var options, t;\n  options = dragon;\n  t = new Turtle(options);\n  $(window).on('keypress', function(e) {\n    if (e.charCode === 110) {\n      return t.drawNextIteration();\n    }\n  });\n  $('button').on('click', function() {\n    return t.drawNextIteration();\n  });\n  return customTimeInterval(1000, function() {\n    var maxIterations;\n    maxIterations = 8;\n    if (t.iterations < maxIterations) {\n      return t.drawNextIteration();\n    }\n  });\n});\n\nTurtle = (function() {\n\n  function Turtle(options) {\n    this.distance = 5;\n    this.distanceMultiplier = options.distanceMultiplier || 1;\n    this.d_radians = options.angle;\n    this.iterations = options.iterations;\n    this.rules = options.rules;\n    this.startingString = options.startingString;\n    this.canvas = document.getElementById('canvas');\n    this.context = this.canvas.getContext('2d');\n    this.radians = 0;\n    this.string = options.startingString;\n    this.max = {\n      x: 0,\n      y: 0\n    };\n    this.min = {\n      x: 0,\n      y: 0\n    };\n    this.lastTrans = {\n      x: 0,\n      y: 0\n    };\n    this.scaler = 1;\n    this.pos = {\n      x: 0,\n      y: 0\n    };\n    this.points = [$.extend(true, {}, this.pos)];\n    customTimer(this.generateString, 'generate string', this);\n    customTimer(this.findPoints, 'find points', this);\n    this.resizeCanvas();\n    customTimer(this.draw, 'drawAnimate', this);\n  }\n\n  Turtle.prototype.generateString = function() {\n    var letter, num, old, rule, ruleInputs, _results;\n    num = this.iterations;\n    _results = [];\n    while (num -= 1) {\n      ruleInputs = this.rules.map(function(x) {\n        return x.input;\n      });\n      old = this.string;\n      this.string = new String;\n      _results.push((function() {\n        var _i, _len, _results1;\n        _results1 = [];\n        for (_i = 0, _len = old.length; _i < _len; _i++) {\n          letter = old[_i];\n          if (__indexOf.call(ruleInputs, letter) >= 0) {\n            _results1.push((function() {\n              var _j, _len1, _ref, _results2;\n              _ref = this.rules;\n              _results2 = [];\n              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n                rule = _ref[_j];\n                if (letter === rule.input) {\n                  _results2.push(this.string = this.string.concat(rule.output));\n                } else {\n                  _results2.push(void 0);\n                }\n              }\n              return _results2;\n            }).call(this));\n          } else {\n            _results1.push(this.string = this.string.concat(letter));\n          }\n        }\n        return _results1;\n      }).call(this));\n    }\n    return _results;\n  };\n\n  Turtle.prototype.goForward = function() {\n    var newX, newY;\n    this.distance = this.distance * this.distanceMultiplier;\n    newX = this.distance * Math.cos(this.radians) + this.pos.x;\n    newY = this.distance * Math.sin(this.radians) + this.pos.y;\n    this.points.push({\n      x: newX,\n      y: newY\n    });\n    if (newX > this.max.x) {\n      this.max.x = newX;\n    }\n    if (newY > this.max.y) {\n      this.max.y = newY;\n    }\n    if (newX < this.min.x) {\n      this.min.x = newX;\n    }\n    if (newY < this.min.y) {\n      this.min.y = newY;\n    }\n    this.pos.x = newX;\n    return this.pos.y = newY;\n  };\n\n  Turtle.prototype.turn = function(direction) {\n    if (direction === 'r') {\n      return this.radians = this.radians - this.d_radians;\n    } else if (direction === 'l') {\n      return this.radians = this.radians + this.d_radians;\n    }\n  };\n\n  Turtle.prototype.findPoints = function() {\n    var letter, _i, _len, _ref, _results;\n    _ref = this.string;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      letter = _ref[_i];\n      if (/[ABF]/.test(letter)) {\n        _results.push(this.goForward());\n      } else if (letter === 'l') {\n        _results.push(this.turn('l'));\n      } else if (letter === 'r') {\n        _results.push(this.turn('r'));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  Turtle.prototype.draw = function() {\n    var ctx, newX, newY, point, _i, _len, _ref;\n    ctx = this.context;\n    ctx.lineWidth = 5 / this.scaler;\n    ctx.strokeStyle = 'purple';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x, this.points[0].y);\n    _ref = this.points;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      point = _ref[_i];\n      newX = point.x;\n      newY = point.y;\n      ctx.lineTo(newX, newY);\n    }\n    return ctx.stroke();\n  };\n\n  Turtle.prototype.resetCanvas = function() {\n    this.context.translate(-this.lastTrans.x, -this.lastTrans.y);\n    this.context.scale(1 / this.scaler, 1 / this.scaler);\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.string = this.startingString;\n    this.max = {\n      x: 0,\n      y: 0\n    };\n    this.min = {\n      x: 0,\n      y: 0\n    };\n    this.lastTrans = {\n      x: 0,\n      y: 0\n    };\n    this.scaler = 1;\n    this.pos = {\n      x: 0,\n      y: 0\n    };\n    return this.points = [$.extend(true, {}, this.pos)];\n  };\n\n  Turtle.prototype.resizeCanvas = function() {\n    var center, dx, dy, height, heightRatio, rulesString, text, width, widthRatio;\n    width = this.max.x - this.min.x;\n    height = this.max.y - this.min.y;\n    center = {\n      x: this.min.x + width / 2,\n      y: this.min.y + height / 2\n    };\n    widthRatio = this.canvas.width / width;\n    heightRatio = this.canvas.height / height;\n    this.scaler = Math.min.apply(null, [widthRatio, heightRatio, 15]) * 0.9;\n    rulesString = this.rules.map(function(z) {\n      return \"\" + z.input + \"->\" + z.output;\n    });\n    rulesString = rulesString.join(\", \");\n    text = \"\" + (this.scaler.toFixed(2)) + \"x,      iteration:  \" + this.iterations + \",      segments:   \" + this.points.length + \",      angle:      \" + (this.d_radians.toDegrees()) + \",      rules:      \" + rulesString;\n    $('#info span').text(text);\n    dx = -1 * (center.x - this.canvas.width / (2 * this.scaler));\n    dy = -1 * (center.y - this.canvas.height / (2 * this.scaler));\n    this.context.scale(this.scaler, this.scaler);\n    this.lastTrans.x = dx;\n    this.lastTrans.y = dy;\n    return this.context.translate(dx, dy);\n  };\n\n  Turtle.prototype.drawNextIteration = function() {\n    this.resetCanvas();\n    this.iterations++;\n    customTimer(this.generateString, 'generate string', this);\n    customTimer(this.findPoints, 'find points', this);\n    this.resizeCanvas();\n    return customTimer(this.draw, 'drawAnimate', this);\n  };\n\n  return Turtle;\n\n})();\n\ncustomTimeInterval = function(ms, func) {\n  return setInterval(func, ms);\n};\n\nNumber.prototype.toDegrees = function() {\n  return (this * 180 / Math.PI).toFixed(1);\n};\n\ncustomTimer = function(func, desc, context) {\n  var t1, t2;\n  t1 = Date.now();\n  func.apply(context);\n  t2 = Date.now();\n  return console.log(desc + \": \" + (t2 - t1) / 1000 + ' sec');\n};\n\nsierpinksiTriangle = {\n  rules: [\n    {\n      input: 'A',\n      output: 'BlAlB'\n    }, {\n      input: 'B',\n      output: 'ArBrA'\n    }\n  ],\n  iterations: 2,\n  angle: Math.PI / 3,\n  startingString: 'A'\n};\n\ndragon = {\n  rules: [\n    {\n      input: 'X',\n      output: 'XlYFl'\n    }, {\n      input: 'Y',\n      output: 'rFXrY'\n    }\n  ],\n  iterations: 2,\n  angle: Math.PI / 2,\n  distanceMultiplier: 1.0005,\n  startingString: \"FX\"\n};\n\noptions = {\n  rules: [\n    {\n      input: 'X',\n      output: 'XlYFl'\n    }, {\n      input: 'Y',\n      output: 'rFXrY'\n    }\n  ],\n  iterations: 2,\n  angle: Math.PI / 2,\n  startingString: \"FX\"\n};\n","module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  helpers = helpers || Handlebars.helpers;\n  var foundHelper, self=this;\n\n\n  return \"<div id=\\\"content\\\">\\n\\n  <form id='params'>\\n\\n    <label>angle</label>\\n    <input type=\\\"text\\\" name=\\\"angle\\\" value=\\\"90\\\" id=\\\"angle\\\">\\n\\n    <label>iterations</label>\\n    <input type=\\\"text\\\" name=\\\"iterations\\\" value=\\\"5\\\" id=\\\"iterations\\\">\\n    \\n    <label>string</label>\\n    <input type=\\\"text\\\" name=\\\"startingString\\\" value=\\\"FX\\\" id=\\\"startingString\\\">\\n\\n    <label>r1</label>\\n    <input type=\\\"text\\\" name=\\\"r1_input\\\" value=\\\"X\\\" id=\\\"r1_input\\\">\\n    \\n    <label>=></label>\\n    <input class='output' type=\\\"text\\\" name=\\\"r1_output\\\" value=\\\"X\\\" id=\\\"r1_output\\\">\\n\\n    <label>r2</label>\\n    <input type=\\\"text\\\" name=\\\"r2_input\\\" value=\\\"X\\\" id=\\\"r2_input\\\">\\n\\n    <label>=></label>\\n    <input class='output' type=\\\"text\\\" name=\\\"r2_output\\\" value=\\\"X\\\" id=\\\"r2_output\\\">\\n\\n    <input type=\\\"submit\\\" value=\\\"Go\\\">\\n  </form>\\n\\n  <div id='info'><span>generating...</span>\\n    <button>+</button>\\n  </div>\\n\\n  <canvas id=\\\"canvas\\\" width=\\\"700\\\" height=\\\"700\\\"></canvas>\\n\\n</div>\\n\";});","var View,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nrequire('lib/view_helper');\n\nmodule.exports = View = (function(_super) {\n\n  __extends(View, _super);\n\n  function View() {\n    this.render = __bind(this.render, this);\n    return View.__super__.constructor.apply(this, arguments);\n  }\n\n  View.prototype.template = function() {};\n\n  View.prototype.getRenderData = function() {};\n\n  View.prototype.render = function() {\n    this.$el.html(this.template(this.getRenderData()));\n    this.afterRender();\n    return this;\n  };\n\n  View.prototype.afterRender = function() {};\n\n  return View;\n\n})(Backbone.View);\n"]}