{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/initialize.coffee","app/lib/router.coffee","app/lib/view_helper.coffee","app/models/collection.coffee","app/models/model.coffee","app/views/home_view.coffee","app/views/templates/home.hbs","app/views/view.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;A,CCAA;;AACA;AACA;AAFA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAftPA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AALA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;A","sourcesContent":["var Application;\n\nApplication = {\n  initialize: function() {\n    var HomeView, Router;\n    HomeView = require('views/home_view');\n    Router = require('lib/router');\n    this.homeView = new HomeView();\n    this.router = new Router();\n    return typeof Object.freeze === \"function\" ? Object.freeze(this) : void 0;\n  }\n};\n\nmodule.exports = Application;\n","var application;\n\napplication = require('application');\n\n$(function() {\n  application.initialize();\n  return Backbone.history.start();\n});\n","var Router, application,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napplication = require('application');\n\nmodule.exports = Router = (function(_super) {\n\n  __extends(Router, _super);\n\n  function Router() {\n    return Router.__super__.constructor.apply(this, arguments);\n  }\n\n  Router.prototype.routes = {\n    '': 'home'\n  };\n\n  Router.prototype.home = function() {\n    return $('body').html(application.homeView.render().el);\n  };\n\n  return Router;\n\n})(Backbone.Router);\n","\n\n","var Collection,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = Collection = (function(_super) {\n\n  __extends(Collection, _super);\n\n  function Collection() {\n    return Collection.__super__.constructor.apply(this, arguments);\n  }\n\n  return Collection;\n\n})(Backbone.Collection);\n","var Model,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = Model = (function(_super) {\n\n  __extends(Model, _super);\n\n  function Model() {\n    return Model.__super__.constructor.apply(this, arguments);\n  }\n\n  return Model;\n\n})(Backbone.Model);\n","var HomeView, Turtle, View, customTimeInterval, template,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nView = require('./view');\n\ntemplate = require('./templates/home');\n\nmodule.exports = HomeView = (function(_super) {\n\n  __extends(HomeView, _super);\n\n  function HomeView() {\n    return HomeView.__super__.constructor.apply(this, arguments);\n  }\n\n  HomeView.prototype.id = 'home-view';\n\n  HomeView.prototype.template = template;\n\n  return HomeView;\n\n})(View);\n\n$(document).ready(function() {\n  var angle, distance, maxIterations, rules, startingString, t;\n  distance = 10;\n  maxIterations = 11;\n  angle = Math.PI / 2;\n  startingString = \"FX\";\n  rules = [\n    {\n      input: 'X',\n      output: 'XrYFr'\n    }, {\n      input: 'Y',\n      output: 'lFXlY'\n    }\n  ];\n  t = new Turtle(angle, 0, distance, 2, rules, startingString);\n  $('button').on('click', function() {\n    t.iterations++;\n    t.resetCanvas();\n    return t = new Turtle(angle, 0, distance, t.iterations, rules, startingString);\n  });\n  return customTimeInterval(2000, function() {\n    if (t.iterations < maxIterations) {\n      t.iterations++;\n      t.resetCanvas();\n      return t = new Turtle(angle, 0, distance, t.iterations, rules, startingString);\n    }\n  });\n});\n\ncustomTimeInterval = function(ms, func) {\n  return setInterval(func, ms);\n};\n\nTurtle = (function() {\n\n  function Turtle(d_radians, d_distance, distance, iterations, rules, startingString) {\n    this.d_radians = d_radians;\n    this.d_distance = d_distance;\n    this.distance = distance;\n    this.iterations = iterations;\n    this.rules = rules;\n    this.startingString = startingString;\n    this.canvas = document.getElementById('canvas');\n    this.context = this.canvas.getContext('2d');\n    this.radians = 0;\n    this.startingString = startingString;\n    this.string = startingString;\n    this.rules = rules;\n    this.maxX = 0;\n    this.maxY = 0;\n    this.minX = 0;\n    this.minY = 0;\n    this.lastTrans = {\n      x: 0,\n      y: 0\n    };\n    this.lastScaler = 1;\n    this.d_radians = d_radians;\n    this.distance = distance;\n    this.iterations = iterations;\n    this.pos = {\n      x: 0,\n      y: 0\n    };\n    this.points = [$.extend(true, {}, this.pos)];\n    this.findPoints();\n    this.resizeCanvas();\n    this.draw();\n  }\n\n  Turtle.prototype.generateString = function() {\n    var letter, num, old, rule, ruleInputs, t1, t2, _i, _j, _len, _len1, _ref;\n    t1 = Date.now();\n    num = this.iterations;\n    while (num -= 1) {\n      ruleInputs = this.rules.map(function(x) {\n        return x.input;\n      });\n      old = this.string;\n      this.string = new String;\n      for (_i = 0, _len = old.length; _i < _len; _i++) {\n        letter = old[_i];\n        if (__indexOf.call(ruleInputs, letter) >= 0) {\n          _ref = this.rules;\n          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n            rule = _ref[_j];\n            if (letter === rule.input) {\n              this.string = this.string.concat(rule.output);\n            }\n          }\n        } else {\n          this.string = this.string.concat(letter);\n        }\n      }\n    }\n    t2 = Date.now();\n    return console.log('generateString: ' + (t2 - t1) / 1000 + ' sec');\n  };\n\n  Turtle.prototype.goForward = function() {\n    var newX, newY;\n    newX = this.distance * Math.cos(this.radians) + this.pos.x;\n    newY = this.distance * Math.sin(this.radians) + this.pos.y;\n    this.points.push({\n      x: newX,\n      y: newY\n    });\n    if (newX > this.maxX) {\n      this.maxX = newX;\n    }\n    if (newY > this.maxY) {\n      this.maxY = newY;\n    }\n    if (newX < this.minX) {\n      this.minX = newX;\n    }\n    if (newY < this.minY) {\n      this.minY = newY;\n    }\n    this.pos.x = newX;\n    return this.pos.y = newY;\n  };\n\n  Turtle.prototype.turn = function(direction) {\n    if (direction === 'r') {\n      return this.radians = this.radians - this.d_radians;\n    } else if (direction === 'l') {\n      return this.radians = this.radians + this.d_radians;\n    }\n  };\n\n  Turtle.prototype.findPoints = function() {\n    var letter, t1, t2, _i, _len, _ref;\n    this.generateString();\n    t1 = Date.now();\n    _ref = this.string;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      letter = _ref[_i];\n      if (/[F]/.test(letter)) {\n        this.goForward();\n      } else if (letter === 'l') {\n        this.turn('l');\n      } else if (letter === 'r') {\n        this.turn('r');\n      }\n    }\n    t2 = Date.now();\n    return console.log('findPoints: ' + (t2 - t1) / 1000 + ' sec');\n  };\n\n  Turtle.prototype.draw = function() {\n    var ctx, newX, newY, point, t1, t2, _i, _len, _ref;\n    t1 = Date.now();\n    ctx = this.context;\n    ctx.lineWidth = 1;\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x, this.points[0].y);\n    _ref = this.points;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      point = _ref[_i];\n      newX = point.x;\n      newY = point.y;\n      ctx.lineTo(newX, newY);\n    }\n    ctx.stroke();\n    t2 = Date.now();\n    return console.log('draw: ' + (t2 - t1) / 1000 + ' sec');\n  };\n\n  Turtle.prototype.resetCanvas = function() {\n    console.log('resetting canvas...');\n    this.context.translate(-this.lastTrans.x, -this.lastTrans.y);\n    this.context.scale(1 / this.lastScaler, 1 / this.lastScaler);\n    return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  };\n\n  Turtle.prototype.resizeCanvas = function() {\n    var centerx, centery, dx, dy, height, heightRatio, per, rulesString, scaler, width, widthRatio;\n    width = this.maxX - this.minX;\n    height = this.maxY - this.minY;\n    widthRatio = this.canvas.width / width;\n    heightRatio = this.canvas.height / height;\n    per = 1;\n    centerx = this.minX + width / 2;\n    centery = this.minY + height / 2;\n    scaler = Math.min.apply(null, [widthRatio, heightRatio]) * 0.9;\n    this.lastScaler = scaler;\n    rulesString = this.rules.map(function(z) {\n      return \"\" + z.input + \"->\" + z.output;\n    });\n    rulesString = rulesString.join(\", \");\n    this.context.font = \"15px Georgia\";\n    this.context.fillText(\"\" + (scaler.toFixed(2)) + \"x,      iteration:\" + this.iterations + \",      segments:\" + this.points.length + \",      angle:\" + ((this.d_radians * 180 / Math.PI).toFixed(1)) + \",      rules:\" + rulesString, 10, 20);\n    dx = -1 * (centerx - this.canvas.width / (2 * scaler));\n    dy = -1 * (centery - this.canvas.height / (2 * scaler));\n    this.context.scale(scaler, scaler);\n    this.lastTrans.x = dx;\n    this.lastTrans.y = dy;\n    return this.context.translate(dx, dy);\n  };\n\n  Turtle.prototype.xBox = function(x1, y1, x2, y2) {\n    var ctx;\n    ctx = this.context;\n    ctx.beginPath();\n    ctx.moveTo(x1, y2);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x2, y1);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x1, y2);\n    ctx.lineTo(x2, y1);\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    return ctx.stroke();\n  };\n\n  return Turtle;\n\n})();\n","module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  helpers = helpers || Handlebars.helpers;\n  var foundHelper, self=this;\n\n\n  return \"<div id=\\\"content\\\">\\n  <canvas id=\\\"canvas\\\" width=\\\"800\\\" height=\\\"800\\\"></canvas>\\n  <button>more</button>\\n</div>\\n\";});","var View,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nrequire('lib/view_helper');\n\nmodule.exports = View = (function(_super) {\n\n  __extends(View, _super);\n\n  function View() {\n    this.render = __bind(this.render, this);\n    return View.__super__.constructor.apply(this, arguments);\n  }\n\n  View.prototype.template = function() {};\n\n  View.prototype.getRenderData = function() {};\n\n  View.prototype.render = function() {\n    this.$el.html(this.template(this.getRenderData()));\n    this.afterRender();\n    return this;\n  };\n\n  View.prototype.afterRender = function() {};\n\n  return View;\n\n})(Backbone.View);\n"]}